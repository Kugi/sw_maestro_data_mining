<Ipython 기초>
  Python 개발 환경 -> Ipython과 텍스트 에디터(text editor)
  왜 IPython인가? 이것은 통합적인 개발 환경을 갖는다.(It's Intergrated Development Environment(IDE))
                  - 고급의 그래픽 툴을 갖는다.
                  - 완벽한 편집능력을 갖는다.
  
  Ipython -> Python Shell
          -> Rich GUI Console
          -> Web-based interactive Notebook format
          -> 가볍고, 빠르게 병렬적인 컴퓨터 엔진을 갖는다.
          
  ex coding> 
    - Ipython과 Python의 완벽한 연계동작
    - data = {i : randn() for i in range(7)}
        data 저장, i = [0: 7]에서 각 각의 i에 대응하는 임의의 수를 저장한다. 
        randn()을 실제로 사용하는 방법 : 
          import numpy
          numpy.random.randn() #임의의 수 출력
          numpy.random.randn(x, y) #x행 y열의 임의 원소의 배열 생성
          
          
<Tab Completion>
탭을 사용한 완성기능.

Ipython shell을 보면 표면적으로 상호작용적인 파이썬의 인터프린터(interpreter)와 다소 다르게 보일 수 있다.
Mathematica한 사용자는 길게 열거되어지는 입력과 출력을 친숙하게 표기할 수 있다.(나타날 수 있다. 마치 자동 탭 완성처럼)

쉘 표현식은 입력 도중에 <Tab>키를 누름으로써 지금까지 입력한 문자에 일치하는 변수(객체, 함수 등) 네임 스페이스들을 검색한다.

ex coding>
- 당신이 입력한 문자에 일치하는 네임 스페이스들을 검색

- 타이핑 하기 전에 djEJ한 객체에 해당하는 함수들(methods)을 자동으로 완성한다.

- 모듈(modules)에 대해서도 동일하게 완성한다.

(!!!!매우 도움이 될 듯, 특히 windows에서의 개발환경에서... p63 예제코드 꼭 쳐볼 것)
- 탭 완성 대화형 네임스페이스를 검색하고, 객체나 파일 경로(심지어는 파이썬 문자열)
과 같은 모듈, 당신이 타이핑한것과 이리하는 컴퓨터 시스템 파일에 대한 어떠한 것도 완성한다

- %run 명려와와 함께 혼동하여 사용하면, 이 기능이 의심할 것 없이 당신의 키 타이핑을 확실히 줄어 줄 것이다.(다음 섹션에서 보자)


<내성(Introspection) - ?와 ??마크>
- 변수 뒤나 앞에 ?마크를 사용하면 객체에 대한 일반적인 정보를 보여준다.
ex coding>
b = [1, 2, 3]일 때,
In[] :　b?
Type: list
string Form : [1, 2, 3]
.
.
.
Docstring:
~~
~~
(꼭 한번 쳐보고, 출력 결과와 특히 Docstring을 확인해봐용~)

이것은 객체내성(object introspection)이라고 한다. 

- 만약에 객체가 함수이거나 일시적인 함수(instance method)인 경우, "the docstring"이 정의 되어져인 있는 경우 함께 정보를 보여준다. 다음과 같이 함수를 정의해서 확인해 보자.
ex coding>
def add_numbers(a, b):
  """ 
	Add two numbers together
	... 큰따음표 3개로 docstring을 정의한다!!!! ...
	-----------------------------------
	"""
	return a + b
?를 사용해서 직접 돌려보고 docstring 부분을 확인해 봐라.

- ??마트는 가능하다면 함수의 소스코드를 함께 볼 수 있다. 위에서 정의한 add_numbers(a, b)를 직접 돌려봐라.
ex coding>
add_number??

(!!!이것도 매우 자주 쓰이는 사용입니다 특히나 *기능에 대해서 직접 해보세요 page 64)
- ?의 마지막 사용 영역, 이것은 유사한 표준 UNIX또는 Windows 명령 line에 대한 방식의 IPython namespace를 찾는데 도움을 준다! "wildcard(*)“를 섞은 문자열을 검색하면 이와 동일한 모든 이름들을 보여준다!!!! 
In[] : np.*load*?


<%run 명령>
모든 파일은 %run명령어를 사용하면 IPython 영역의 환경 내부에 있는 Python 프로그램으로 실행 되어질 수 있다.
ex coding>
(page65 직접 돌려보길...)
 In []: %run kkkkk.py #kkkkk.py의 파일에 정의된 모든 변수들이(imports, 함수들, 그리고 다른 전역변수) IPython shell에서 접근 가능해진다.
Tip> <Ctrl-C>를 누르면 즉시 중단, 파이썬 프로세스를 강제 종료?!


<클립보드로부터 코드를 실행>


<키보드 단축키>
C-a/e; 문장 맨 앞/뒤
C-b/f; 문자 뒤/앞으로 커서 이동
-기타 테이블 참조(page 68)-


<예외와 역추적>
%run을 실행하는 동안 또는 어떠한 문장을 실행하는 동안에 예외가 발생한다면 IPython은기본적으로 스택식의 각 각의 지점 주변에서의 문장의 일부 문장들을 함께 스택추적(역추적)으로 전체적으로 호출하여 출력해준다.
다음 chapter에서 보겠지만, 스택으로 단계별로 접근해서 디버그를 할 수 있다. %debug또는 %pdb magics을 사용한다. 

<매직 명령어(Magic Commands)>
page 70 테이블을 직접 읽어보고 하나하나 돌려보는 것도 좋을 듯...

<Qt기반의 풍부한 GUI 콘솔>
ipython qtconsole --pylab=inline 으로 Qt console창을 띄울 수 있다.
<ipython-in-depth> 동영상과 notebooks에도 실려있다.

<matplotlib통합과 Pylab모드>

<명령 히스토리(the Command History) 사용하기>


<입출력 변수들>
동영상의 내용과 추가해서 설명하면,
_와 __와 ___ #각각 바로 앞, 그 앞, 그 앞의 out 값을 출력
_27 #Out[27] 줄의 값을 반환한다.

_i와 _ii와 _iii #각각 바로 앞, 그 앞, 그 앞의 in 값을 출력
_i27 #in[27], 즉 27번째 입력 줄의 값을 반환한다.

exec 키워드:
 exec _i27 
#입력 문장은 문자열이기 때문에 이와 같이 실해하면, In[27]에 있는 문장을 다시 실행할수 있다.

%hist #모든 입력 기록을 출력한다. 라인번호를 함께 출력할 수도 있다.
%reset #상호적인 네임스페이스(the interactive namespace)와 입력과 출력 캐시들을 모두 지운다.
%xdel #특별히 참조된 IPython machinery의 객체를 모두 지운다.
%reset과 %xdel은 메모리 문제를 피할 수 있다.

<입력과 출력을 로그기록하기>
%logstart #기록 시작(출력 파일의 경로를 지정할 수도 있다 ?마크를 사용해서 봐보세요~)
%logoff #로그기록 잠시 중단
%logon #로그기록 다시 시작
%logstate #로그상태
%logstop #기록 중단

<운영체제와 상호작용>
page 75 테이블을 보세요.. 자세히 나와있어요.. 다들 알 듯...

<셀 명령어들과 별칭(Aliases)>

<소프트웨어 개발 툴들>
대화형 컴퓨팅 및 데이터 탐색을 위한 편한 환경일 뿐만 아니라, IPython은 소프트웨어 개발 툴로도 적합하다. 데이터 분석 앱에서는 올바른 코드(correct code)가 가장 중요하다. 다행히도 IPython은 밀접하게 통합되어 내장된 파이썬 PDB디버거를 강화한다.
다음으로 당신은 코드가 빨리(fast) 완성될 것이다. 이는 IPython이 사용하기 쉬운 코드 타이밍(code timing)과 프로파일링 도구(profiling tools)를 가지고 있기 때문이다.
나는 이러한 도구에 대해 여기서 자세히 설명하겠다.





