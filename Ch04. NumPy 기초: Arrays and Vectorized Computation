sw_maestro_data_mining
======================
NumPy Basics: Arrays and Vectorized Computation
- NumPy는 기초적인 패키지로 높은 과학적 컴퓨터 분석과 데이터 분석에 사용된다.

- ndarray, 빠르고 공간 효율적인 다차원 배열. 이는 벡터화된 수학적인 연산과 정교한 폭넓은 능력(broadcasting capabilities)을 갖는다.
- 표준 수학적 함수 제공, 이는 반복(loop)없이 데이터 배열에 대한 빠른 작동 가능.
- 읽고/쓰는 배열 데이터에 대한 도구 메모리-지도화된 파일(memory-mapped files)과 함께 작동 가능.
- 선형 기하학, 랜덤 수 생성, 그리고 푸리에 변환 가능. 
- c, c++, 포트란에서 사용되어진 코드와 연관(integrating) 가능한 툴.


<The NumPy ndarray:A Multidimensional Array Object>
ndarray(N-dimensional array object), 파이썬에서 큰 데이터에 대한 빠르고, 유연한 그릇(container)이다. 
사용 :
 - 스칼라 요소간에 일반적인 연산자와 유사한 방법으로 사용되어진다. 
  ex)
  data = array 2by 2..
  data * 10; 각 요소에 10을 곱한다.
  data ＋data; 각 요소끼리 더한다.
 - data.shape; 배열의 구조를 print한다. (2by 3, 3by 3...)
   data.dtype; data type 프린트.


<Creating ndarr매열을 arrays>
배열 함수를 이용해서 배열을 쉽게 생성하는 방법이 있다. 
- list -> array
  data = [5, 2.5, 3, 1, 2]
	arr = np.array(data)
	
	data1 = [[1, 2, 3, 4], [5, 6, 7, 8]]
 	arr1 = np.array(data1) #nested sequences를 다차원의 배열로 변환 가능
	arr1.ndim #배열의 차원 출력
	arr1.shape #배열의 구조 출력
- np.zeros(), np.ones() #0또는 1로 이루어진 배열을 생성한다.
- np.empty() #특정한 값으로 초기화 하지 않고 배열을 생성한다.
		(초기화 하지않고, 쓰레기 값(garbage values)을 리턴한다.)
- np.arange(n) #0부터 n미만의 수로 이루어진 배열(ndarray)을 생성.


<Data Types for ndarrays>
특정한 데이터 타입의 정보를 포함하여 개체(배열)를 생성.
arr1 = np.array([1, 2, 3], dtype = np.float64)
arr2 = np.array([1, 2, 3], dtype = np.int32)
arr1.dtype ==> dtype('float64')
arr2.dtype ==> dtype('int32')


<참조-Numpy의 지원되는 데이터 형식(types)>
Type Type Code Description
int8, uint8 i1, u1 Signed and unsigned 8-bit (1 byte) integer types
int16, uint16 i2, u2 Signed and unsigned 16-bit integer types
int32, uint32 i4, u4 Signed and unsigned 32-bit integer types
int64, uint64 i8, u8 Signed and unsigned 32-bit integer types
float16 f2 Half-precision floating point
float32 f4 or f Standard single-precision floating point. Compatible with C float
float64, float128 f8 or d Standard double-precision floating point. Compatible with C double and Python float object
Type Type Code Description
float128 f16 or g Extended-precision floating point
complex64, complex128,  c8, c16, Complex numbers represented by two 32, 64, or 128 floats, respectively
complex256 c32
bool ? Boolean type storing True and False values
object O Python object type
string_ S Fixed-length string type (1 byte per character). For example, to create
a string dtype with length 10, use 'S10'.
unicode_ U Fixed-length unicode type (number of bytes platform specific). Same
specification semantics as string_ (e.g. 'U10').

astype 메소드를 사용하여 dtype로 선언된 배열을 새로운 ndarray로 'cast'한다.
-int -> float

arr.astype(np.float64)

-float -> int


